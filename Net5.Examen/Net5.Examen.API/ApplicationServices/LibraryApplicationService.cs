using AutoMapper;
using Microsoft.Extensions.Logging;
using Net5.Examen.Infrastructure.CrossCutting.Dtos;
using Net5.Examen.Infrastructure.Data.Contexts;
using Net5.Examen.Infrastructure.Data.Entities;
using Serilog.Context;
using SerilogTimings;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Net5.Examen.API.ApplicationServices
{
    public class LibraryApplicationService : ILibraryApplicationService
    {
        private readonly LibraryContext _context;
        private readonly IMapper _mapper;
        private readonly ILogger _logger;
        public LibraryApplicationService(
            LibraryContext context,
            IMapper mapper,
            ILogger<LibraryApplicationService> logger
            )
         
        {
            _context = context;
            _mapper = mapper;
            _logger = logger;
        }
        public List<StudentDto> GetStudents(StudentsResourceParameters studentsResourceParameters)
        {
            List<StudentDto> students = new List<StudentDto>();

            using (Operation.Time("Getting data from the database"))
            {

                var query = from a in _context.Students
                            select a;
                if (!string.IsNullOrEmpty(studentsResourceParameters.SearchBy))
                {
                    query = from a in _context.Students
                            where a.FirstName.ToLower().Contains(studentsResourceParameters.SearchBy)
                            || a.MiddleName.ToLower().Contains(studentsResourceParameters.SearchBy)
                            || a.LastNames.ToLower().Contains(studentsResourceParameters.SearchBy)
                            select a;
                }

                bool isDesc = true;

                if (studentsResourceParameters.OrderBy.ToLower().Contains("asc"))
                {
                    isDesc = false;
                }


                if (studentsResourceParameters.OrderBy.ToLower().Contains("name"))
                {
                    if (isDesc)
                    {
                        query = query.OrderByDescending(o => o.FirstName);
                    }
                    else
                    {
                        query = query.OrderBy(o => o.FirstName);
                    }

                }

                if (studentsResourceParameters.OrderBy.ToLower().Contains("age"))
                {
                    if (!isDesc)
                    {
                        query = query.OrderByDescending(o => o.DateOfBirth);
                    }
                    else
                    {
                        query = query.OrderBy(o => o.DateOfBirth);
                    }
                }
                int beginRecord = (studentsResourceParameters.PageNumber - 1) * studentsResourceParameters.PageSize;

                query = query.Skip(beginRecord).Take(studentsResourceParameters.PageSize);

                students = _mapper.Map<List<StudentDto>>(query.ToList());
            }

            using (LogContext.PushProperty("RowParsed", students))
            {
                _logger.LogWarning("Finishing parsed data for GetStudents");
            }
            _logger.LogWarning("A message generated by {StudentName} ", "David");

            List<string> topics = new List<string> { "C#", ".NET", "logging" };
            _logger.LogWarning("Another message generated by {AuthorName} - Today is {Today:yyyy-MM-dd} and I'm talking about {Topics}", "David", DateTime.Now.Date, topics);

            return students;
        }

        public StudentDto GetStudent(Guid studentId)
        {
            StudentDto student = _mapper.Map<StudentDto>(_context.Students.FirstOrDefault(a=>a.StudentId == studentId));
            return student;
        }

        public StudentDto CreateStudent(StudentForCreationDto student)
        {
            var studentEntity = _mapper.Map<Student>(student);
            _context.Students.Add(studentEntity);
            _context.SaveChanges();

            var studentToReturn = _mapper.Map<StudentDto>(studentEntity);
            return studentToReturn;
        }


        public StudentDto UpdateStudent(Guid studentId,StudentForUpdateDto student)
        {
            Student studentFromRepository = _context.Students.FirstOrDefault(a => a.StudentId == studentId);

            _mapper.Map(student,studentFromRepository);

            _context.Students.Update(studentFromRepository);
            _context.SaveChanges();

            var studentToReturn = _mapper.Map<StudentDto>(_context.Students.FirstOrDefault(a => a.StudentId == studentId));
            return studentToReturn;
        }

        public StudentDto DeleteStudent(Guid studentId)
        {
            Student studentFromRepository = _context.Students.FirstOrDefault(a => a.StudentId == studentId);
            _context.Students.Remove(studentFromRepository);
            _context.SaveChanges();

            StudentDto student = _mapper.Map<StudentDto>(studentFromRepository);
            return student;
        }
    }
}
